#+title: Aabm's literate configuration for GNU Emacs
#+author: aabm
#+email: aabm@disroot.org
#+startup: overview
#+property: header-args :tangle config.el

* About

2023 refix edition!

This is my personal configuration for GNU Emacs. It is written in a
literate style, combining code snippets and documentation in the same
file.

These days I use Emacs a lot less than I used to when this
configuration was originally written. This means a lot of big features
I used to have are now disabled, and a lot of complexity has been
stripped down. 

In line with the GNU philosophy, this configuration is entirely Free
Software. See the [[file:LICENSE][LICENSE]] file in this repository for more
information.

* Minibuffer
** Which Key

The ~which-key~ package uses the minibuffer to display all active
keybindings in the currently typed prefix. It allows you to navigate
your keybindings via prefixes. Nice for when you forget those
cryptically long keychord sequences.

#+begin_src emacs-lisp
  (use-package which-key
    :straight t
    :diminish which-key-mode
    :init
    (which-key-mode)
    :custom
    (which-key-idle-delay 0.4))
#+end_src

** Completion and interface

The Emacs minibuffer is a surprisingly powerful tool. Here we improve
its completion capabilities as well as its interface.

The packages introduced here are:

- ~orderless~, a more advanced completion style, which I find provides
  a better matching experience. So much better, in fact, that we use
  it as the only completion style.
  
- ~vertico~, which provides a completion interface similar to Ivy or
  Helm, that is, vertically ordered and which can be navigated by
  pressing C-n and C-p.

- ~consult~, which provides advanced completion functions, improving
  upon already existing uses. Powerful functions for switching
  buffers, finding bookmarks, searching files, etc.

- ~embark~, which allows one to perform arbitrary actions on
  minibuffer candidates

- ~marginalia~, which displays handy extra information in the
  minibuffer.

#+begin_src emacs-lisp
  (straight-use-package 'orderless)

  (use-package vertico
    :straight t
    :init
    (vertico-mode)
    :custom
    (completion-styles '(substring orderless))
    (completion-ignore-case t)
    (read-file-name-completion-ignore-case t)
    (read-buffer-completion-ignore-case t)
    (enable-recursive-minibuffers t))

  (use-package consult
    :straight t
    :custom
    (consult-narrow-key "<"))

  (use-package embark
    :straight t
    :defer nil
    :custom
    (embark-indicators
     '(embark-highlight-indicator
       embark-verbose-indicator
       embark-isearch-highlight-indicator))
     :bind
     (:map minibuffer-local-map
	   ("C-." . embark-act)))

  (use-package embark-consult
    :straight t)

  (use-package marginalia
    :straight t
    :init
    (marginalia-mode)
    :bind
    ((:map minibuffer-local-map
	   ("M-a" . marginalia-cycle))))
#+end_src

** Isearch editing

This package allows one to edit the isearch query much like any other
minibuffer prompt. Cursor motion commands won't get you out of
isearch.

#+begin_src emacs-lisp
  (use-package isearch-mb
    :straight t
    :diminish isearch-mb-mode
    :init
    (isearch-mb-mode))
#+end_src

* Writing

All packages and settings relating to writing, from simple text
editing features to complex modes like Org.

** Text editing features
*** Visual lines


This makes it easier to navigate with long paragraphs of plain text.

#+begin_src emacs-lisp
  (global-visual-line-mode t)
#+end_src
 
*** Parens, brackets and quotes
**** Electric pairs

Electric pairs make it so that any opening characters you type
(parentheses, braces, brackets, quotation marks) are automatically
matched with their corresponding closing character. This is handy at all
times when editing, but especially useful for programming in Lisp.

#+begin_src emacs-lisp
  (setq electric-pair-pairs '((?\{ . ?\})
			      (?\( . ?\))
			      (?\[ . ?\])
			      (?\" . ?\")
			      (?\“ . ?\”)))
  (electric-pair-mode t)
#+end_src
**** Electric quotes

This replaces keyboard-style straight quotes with nicer looking curved
quotes.

#+begin_src emacs-lisp
  (setq electric-quote-replace-double t)
#+end_src

**** Highlight matching parentheses

This minor mode highlights the parentheses corresponding to the one
under/behind point. Useful for Lisp programming.

#+begin_src emacs-lisp
  (show-paren-mode t)
#+end_src
 
*** Casing and capitalization

Here we replace the normal capitalization functions with their
more flexible useful ~dwim~ counterparts.

#+begin_src emacs-lisp
  (global-set-key (kbd "M-c") 'capitalize-dwim)
  (global-set-key (kbd "M-u") 'upcase-dwim)
  (global-set-key (kbd "M-l") 'downcase-dwim)
#+end_src

*** Sentence navigation

A nice tweak to sentence navigation commands that makes them more
usable. We change the definition of a sentence to a more reasonable
"something that ends in a single space after punctuation", instead of
the normal double space. This is superior as quite literally no one
double spaces sentences in ~'(current-year)~.
   
#+begin_src emacs-lisp
  (setq sentence-end-double-space nil)
#+end_src

*** Point position

Enabling the following minor modes makes it so that the position of
point is always displayed in the modeline, as coordinates. It also
enables display of the line numbers on the left of the frame.

#+begin_src emacs-lisp
  (line-number-mode t)
  (column-number-mode t)

  (setq display-line-numbers-type 'relative)
  (add-hook 'text-mode-hook 'display-line-numbers-mode)
  (add-hook 'prog-mode-hook 'display-line-numbers-mode)
#+end_src

*** Expand region

A neat little package that allows marking a region in increasing
bounds with each call. Think of this as a more dynamic version of
Vim's "inside" or "around" commands such as ~di(~. Useful for
selecting things inside parentheses, like in Lisp code, or quotes in
prose.

#+begin_src emacs-lisp
  (use-package expand-region
    :straight t
    :bind
    (("C-=" . er/expand-region)))
#+end_src

*** Multiple cursors

This handy package allows simultaneous editing of multiple lines. It's
particularly useful for batch-renaming files in Dired.

#+begin_src emacs-lisp
  (use-package multiple-cursors
    :straight t)
#+end_src

** Org Mode
*** Basic

#+begin_src emacs-lisp
  (setq org-directory "~/Documents/Org/")
#+end_src

*** Editing code blocks

Here we make it so that editing a code block is done in the current
window.

#+begin_src emacs-lisp
  (setq org-src-window-setup 'current-window)
#+end_src

*** Navigating headings

Some settings which make handling Org headings easier: first we make
it so that headings are wrapped by default and that pressing TAB at
the file header cycles all headings. Then we add some convenient
keybindings that allow us to avoid pressing the arrow keys too much.

#+begin_src emacs-lisp
  (use-package org
    :custom
    (org-cycle-global-at-bob t)
    (org-startup-folded t))
#+end_src

*** Capture

With ~org-capture~ I can quickly store thoughts in plain text files. I
use this for my agenda and TODO lists as well as my personal journal.

#+begin_src emacs-lisp
  (use-package org
    :custom
    (org-bookmark-names-plist nil)
    (org-todo-keywords '((sequence "TODO(t)" "MOVE(m)" "WAIT(w)" "|" "DONE(d)" "DROP(c)")))
    (org-refile-targets nil)
    (org-agenda-files '("journal.org"))
    (org-archive-location (format "archive.org::* %s" (format-time-string "%Y")))
    (org-capture-templates
     '(("t" "Daily TODO"
	entry
	(file+datetree "journal.org")
	"* %?\n%t")
       ("f" "Future TODO"
	entry
	(file+datetree+prompt "journal.org")
	"* %?\n%t"
	:time-prompt t))))
#+end_src

*** Custom bullets

To make Org look a bit nicer, we use the ~org-superstar~ package. This
replaces the heading asterisks with custom UTF-8 bullet characters.

#+begin_example emacs-lisp
  (use-package org-superstar
    :straight t
    :custom
    (org-superstar-cycle-headline-bullets 2)
    (org-superstar-leading-bullet ".")
    (org-superstar-special-todo-items t)
    :hook
    (org-mode-hook . org-superstar-mode))
#+end_example

*** Pretty entities

Prettify some characters.

#+begin_src emacs-lisp
  (use-package org
    :custom
    (org-pretty-entities t))
#+end_src

*** Find notes file

#+begin_src emacs-lisp
  (defun org-find-notes-index-file ()
    (interactive)
    (find-file (expand-file-name "index.org" org-directory)))

  (defun org-find-notes-journal-file ()
    (interactive)
    (find-file (expand-file-name "journal.org" org-directory)))
#+end_src

*** Org Roam

~org-roam~ is a very powerful extension to org-mode. Essentially, it
is a package that maintains a relational database of links between
files, and allows navigation of this database using links and
backlinks. Org Roam is made as a tool for notetaking following the
~zettelkasten~ method. It is incredibly useful tool. I personally
treat it as a second brain, in which I store all the information I
would like to later recall.

We also install ~org-roam-ui~, which runs a local web server for
displaying a visual representation of links between notes. It's quite
fancy.

#+begin_src emacs-lisp
  (use-package org-roam
    :straight t
    :init
    (setq org-roam-directory org-directory)
    (setq org-roam-v2-ack t)
    :config
    (org-roam-setup)
    :custom
    (org-roam-db-location
     (expand-file-name "roam.db" org-roam-directory))
    (org-roam-capture-templates
     '(("d" "default" plain "%?"
	:if-new (file+head "${slug}.org"
			   "#+title: ${title}\n#+date: %t\n")
	:unnarrowed t)))
    (org-roam-db-update-on-save t))

  (use-package org-roam-ui
    :straight
    (:host github :repo "org-roam/org-roam-ui"
	   :branch "main" :files ("*.el" "out"))
      :after org-roam
      :custom
      (org-roam-ui-sync-theme t)
      (org-roam-ui-follow t)
      (org-roam-ui-update-on-save t)
      (org-roam-ui-open-on-start t))
#+end_src

** Other formats

#+begin_src emacs-lisp
  (use-package markdown-mode
    :straight t)
#+end_src

** Citations

#+begin_src emacs-lisp
  ;; (use-package org
  ;;   :custom
  ;;   (org-cite-global-bibliography "~/Documents/bibtex.bib"))

  (use-package citar
    :straight t
    :custom
    (org-cite-insert-processor 'citar)
    (org-cite-follow-processor 'citar)
    (org-cite-activate-processor 'citar)
    (citar-bibliography org-cite-global-bibliography))
#+end_src

* Reading
** Olivetti

~olivetti-mode~ is a minor mode which centers text on the screen.
Simple as.

#+begin_src emacs-lisp
  (use-package olivetti
    :straight t
    :custom
    (olivetti-body-width 0.72))
#+end_src

* Programming
** Rainbow delimiters

Makes it easier to tell pairs of delimiters apart. Also looks nice.

#+begin_src emacs-lisp
  (use-package rainbow-delimiters
    :straight t
    :hook
    ((prog-mode-hook . rainbow-delimiters-mode)))
#+end_src

* Projects

Settings and packages for managing files, projects and version
control.

** Magit

A powerful git porcelain, and a very famous "killer app" for Emacs. It
is indeed very powerful, but sometimes I find its UI gets in the way a
bit. I keep it for those times when ~vc~ simply won't do.

#+begin_src emacs-lisp
  (use-package magit
    :straight t
    :commands
    (magit-status magit)
    :custom
    (magit-display-buffer-function #'magit-display-buffer-same-window-except-diff-v1)
    :config
    (defun magit-commit-all ()
      (interactive)
      (start-process-shell-command
       "" nil "git add .")
      (magit-commit-create)))
#+end_src

** Dired

Big changes to ~dired~ behavior. First we change the flags it passes
to the ~ls~ command, which in turn gives us better output to work
with, like having directories be listed before regular files. Then we
add other QoL changes, like faster copying and moving, as well as
easier changing of permissions when in writeable dired mode.

I also add a function for opening just about any file from dired using
its respective program, via ~xdg-open~. This way you can open videos
with an external video player and images with a proper image viewer.

We also add some extra packages. First is ~dired-hide-dotfiles-mode~,
which does what the name suggests. It can be toggled by pressing ~h~.

#+begin_src emacs-lisp
  (use-package dired
    :custom
    (dired-listing-switches "-alh --group-directories-first")
    (dired-dwim-target t)
    (wdired-allow-to-change-permissions t)
    :config
    (defun dired-xdg-open ()
      "Open the marked files using xdg-open."
      (interactive)
      (let ((file-list (dired-get-marked-files)))
	(mapc
	 (lambda (file-path)
	   (let ((process-connection-type nil))
	     (start-process "" nil "xdg-open" file-path)))
	 file-list)))
    :bind
    (:map dired-mode-map
	  (("v" . dired-xdg-open))))

  (use-package dired-hide-dotfiles
    :straight t
    :diminish dired-hide-dotfiles-mode
    :hook
    ((dired-mode-hook . dired-hide-dotfiles-mode))
    :bind
    (:map dired-mode-map
	  (("H" . dired-hide-dotfiles-mode))))

  (use-package diredfl
    :straight t
    :hook
    ((dired-mode-hook . diredfl-mode)))
#+end_src

* Buffers and windows
** Ibuffer

~Ibuffer~ is an interface for managing buffers, not too different from
what ~dired~ does for files. We replace the default ~list-buffers~
with it.

We also install the ~ibuffer-project~ package which provides
integration with the built-in ~project.el~ library. This makes ibuffer
group buffers based on the projects they belong to.

#+begin_src emacs-lisp
  (use-package ibuffer-project
    :straight t
    :hook
    (ibuffer-mode-hook . (lambda ()
			   (setq ibuffer-filter-groups
				 (ibuffer-project-generate-filter-groups)))))

  (global-set-key (kbd "C-x C-b") 'ibuffer)
#+end_src

** Easier window switching

A few commands for easier window switching! First, a better keybinding
for the common ~other-window~ command. Then, we replace the basic
window splitting functions for versions which automatically switch to
the newly created windows.

#+begin_src emacs-lisp
  (global-set-key (kbd "M-o") 'other-window)

  (defun split-window-below-and-switch ()
    "A simple replacement for `split-window-below', which automatically focuses the new window."
    (interactive)
    (split-window-below)
    (other-window 1))

  (defun split-window-right-and-switch ()
    "A simple replacement for `split-window-right', which automatically focuses the new window."
    (interactive)
    (split-window-right)
    (other-window 1))

  (global-set-key (kbd "C-x 2") 'split-window-below-and-switch)
  (global-set-key (kbd "C-x 3") 'split-window-right-and-switch)
#+end_src

** Kill this buffer

Here we make the ~C-x k~ key immediately kill the current buffer
instead of prompting. We do this by making a custom function that is
both simpler and more reliable than the built-in ~kill-this-buffer~. I
don't know why exactly, but that built in never works properly.

#+begin_src emacs-lisp
  (defun kill-this-buffer+ ()
    "Kill the current buffer. More reliable alternative to `kill-this-buffer'"
    (interactive)
    (kill-buffer))

  (global-set-key (kbd "C-x k") 'kill-this-buffer+)
#+end_src

** Switch to other buffer

#+begin_src emacs-lisp
  (defun aabm/other-buffer ()
    (interactive)
    (switch-to-buffer nil))
#+end_src

* Keybindings
** Evil mode

Finally migrating to Vim keys.

#+begin_src emacs-lisp
  (use-package evil
    :straight t
    :init
    (setq evil-want-keybinding nil)
    (evil-mode)
    :custom
    (evil-undo-system 'undo-redo)
    :hook
    (with-editor-mode-hook . evil-insert-state)
    (org-src-mode-hook . evil-insert-state))

  (use-package evil-collection
    :straight t
    :init
    (evil-collection-init))

  (use-package evil-surround
    :straight t
    :config
    (global-evil-surround-mode t))

  (use-package org-evil
    :straight t)

  (use-package evil-org
    :straight t
    :hook
    ((org-mode-hook . evil-org-mode))
    :config
    (require 'evil-org-agenda)
    (evil-org-agenda-set-keys))
#+end_src

** General

#+begin_src emacs-lisp
  (use-package general
    :straight t)

  (general-evil-setup)

  (general-nmap
    :states 'normal
    :keymaps 'override
    :prefix "SPC"
    :prefix-map 'leader-map
    ;; files
    "ff" 'find-file
    "fd" 'dired
    "fj" 'dired-jump
    "fc" 'find-emacs-config
    "fo" 'consult-file-externally
    ;; buffers
    "bb" 'consult-buffer
    "bk" 'kill-this-buffer+
    "bK" 'kill-buffer
    "bm" 'consult-bookmark
    "bi" 'ibuffer
    "bo" 'aabm/other-buffer
    ;; git
    "gg" 'magit-status
    "gc" 'magit-commit-all
    "gp" 'magit-push-current-to-pushremote
    "gs" 'vc-git-log-grep
    ;; search
    "sr" 'consult-ripgrep
    "so" 'consult-outline
    "sm" 'consult-mark
    "ss" 'consult-line
    "sl" 'consult-goto-line
    ;; text editing
    "ti" 'indent-region
    "ty" 'consult-yank-from-kill-ring
    "to" 'olivetti-mode
    ;; windows
    "wo" 'other-window
    "wd" 'delete-other-windows
    "wk" 'delete-window
    "wj" 'split-window-below-and-switch
    "wl" 'split-window-right-and-switch
    ;; major modes
    "xe" 'elfeed
    "xs" 'eshell-toggle
    ;; mail
    "mm" 'mu4e
    "mc" 'mu4e-compose-new
    ;;; notes
    ;; basic org
    "ow" 'org-capture
    "oa" 'org-agenda
    "ob" 'org-switchb
    "oj" 'org-find-notes-journal-file
    "oi" 'org-find-notes-index-file
    "of" 'org-roam-node-find
    ;; roam
    "nn" 'org-find-notes-index-file
    "nf" 'org-roam-node-find
    "ni" 'org-roam-node-insert
    "nB" 'org-roam-buffer-toggle
    "nc" 'org-roam-capture
    "no" 'org-roam-buffer-display-dedicated
    "nI" 'org-id-get-create
    "nA" 'org-roam-alias-add
    "nu" 'org-roam-db-sync
    "ng" 'org-roam-ui-mode
    ;; kill stuff (yes these keys are redundant)
    "kk" 'kill-this-buffer+
    "kb" 'kill-buffer
    "kw" 'delete-window
    "kK" 'kill-buffer-and-window
    ;; other
    "." 'embark-act)

  (general-nmap
    :states 'normal
    :keymaps 'eshell-mode-map
    :prefix ","
    :prefix-map 'local-leader-map
    "y" 'eshell-copy-file-path-at-point
    "f" 'eshell-find-file-at-point
    "o" 'eshell-cat-file-at-point
    "b" 'eshell-put-last-output-to-buffer)
#+end_src

* Appearance
** Font

I like the Iosevka font.

#+begin_src emacs-lisp
  (add-to-list 'default-frame-alist '(font . "Iosevka 11"))
  (set-frame-font "Iosevka 11" nil t)
#+end_src

** Theme

Here we install ~doom-themes~, the theme pack from Doom Emacs, and
enable my preferred theme, ~doom-Iosvkem~.

#+begin_src emacs-lisp
    (use-package doom-themes
      :straight t
      :custom
      (doom-gruvbox-dark-variant 'hard))

    (load-theme 'doom-Iosvkem t)
#+end_src

** Modeline

Fancy looking modeline!

#+begin_src emacs-lisp
  (use-package doom-modeline
    :straight t
    :init
    (doom-modeline-mode)
    :custom
    (doom-modeline-enable-word-count t)
    (doom-modeline-minor-modes nil))
#+end_src
