#+title: abe's literate configuration for GNU Emacs
#+author: abe
#+email: aabm@disroot.org
#+startup: overview
#+property: header-args :mkdirp yes

* About

2025 refix edition!

This is my personal configuration for GNU Emacs. It is written in a
literate style, combining code snippets and documentation in the same
file.

This document serves as the single point of entry into this Emacs
setup. Here, all the code is defined and then extracted ("tangled")
out into respective code files.

When I want to modify my Emacs setup, I edit this file and then
run =org-babel-tangle= or press =C-c C-v C-t=. All files will
be updated accordingly.

In line with the GNU philosophy, this configuration is entirely Free
Software. See the [[file:LICENSE][LICENSE]] file in this repository for more
information.

** Providing headers for init files

This provides my init files with headers containing LICENSE
information and brief descriptions of their contents.

#+begin_src emacs-lisp :tangle early-init.el
  ;;; early-init.el --- Emacs early configuration file
  ;; Copyright © 2019-2025 abe <aabm@disroot.org>

  ;; Author: abe <aabm@disroot.org>
  ;; Keywords: Emacs configuration, literate programming
  ;; Homepage: https://github.com/neueleninlekture/emacs

  ;;; License:
  ;; This file is NOT part of GNU Emacs.

  ;; This program is free software; you can redistribute it and/or
  ;; modify it under the terms of the GNU General Public License as
  ;; published by the Free Software Foundation; either version 3, or (at
  ;; your option) any later version.

  ;; This program is distributed in the hope that it will be useful, but
  ;; WITHOUT ANY WARRANTY; without even the implied warranty of
  ;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
  ;; General Public License for more details.

  ;; You should have received a copy of the GNU General Public License
  ;; along with GNU Emacs; see the file LICENSE.  If not, you can visit
  ;; https://www.gnu.org/licenses/gpl-3.0.html or write to the Free
  ;; Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
  ;; MA 02110-1301, USA.

  ;;; Commentary:
  ;; abe's early-init settings for Emacs.

#+end_src

#+begin_src emacs-lisp :tangle init.el
  ;;; init.el --- Main Emacs startup file
  ;; Copyright © 2019-2025 abe <aabm@disroot.org>

  ;; Author: abe <aabm@disroot.org>
  ;; Keywords: literate programming, Emacs configuration
  ;; Homepage: https://github.com/neueleninlekture/emacs

  ;;; License:
  ;; This file is NOT part of GNU Emacs.

  ;; This program is free software; you can redistribute it and/or
  ;; modify it under the terms of the GNU General Public License as
  ;; published by the Free Software Foundation; either version 3, or (at
  ;; your option) any later version.

  ;; This program is distributed in the hope that it will be useful, but
  ;; WITHOUT ANY WARRANTY; without even the implied warranty of
  ;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
  ;; General Public License for more details.

  ;; You should have received a copy of the GNU General Public License
  ;; along with GNU Emacs; see the file LICENSE.  If not, you can visit
  ;; https://www.gnu.org/licenses/gpl-3.0.html or write to the Free
  ;; Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
  ;; MA 02110-1301, USA.

  ;;; Commentary:
  ;; abe's init settings for Emacs.
  
#+end_src

* Initialization

Settings that are loaded early during Emacs' startup process.

** Tweaks for faster startup

With some simple tweaking of garbage collection settings we can make
Emacs start up faster. We then make it so that these settings revert
back to normal after Emacs has started.

#+begin_src emacs-lisp :tangle early-init.el
  (defvar startup-file-name-handler-alist file-name-handler-alist)

  (setq gc-cons-threshold most-positive-fixnum
	gc-cons-percentage 0.6
	file-name-handler-alist nil)

  (defun startup-reset-defaults ()
    (setq gc-cons-threshold 16777216
	  gc-cons-percentage 0.1
	  file-name-handler-alist startup-file-name-handler-alist))

  (add-hook 'emacs-startup-hook #'startup-reset-defaults)
#+end_src

** Disable package.el

We disable =package.el= early, because we do not use it.

#+begin_src emacs-lisp :tangle early-init.el
  (setq package-enable-at-startup nil)
#+end_src

** Information on startup

This displays a brief message with information on startup time after
Emacs has started.

#+begin_src emacs-lisp :tangle early-init.el
  (add-hook 'emacs-startup-hook
	    (lambda ()
	      (message "Emacs ready in %s with %d garbage collections."
		       (format "%.2f seconds"
			       (float-time
				(time-subtract
				 after-init-time
				 before-init-time)))
		       gcs-done)))
#+end_src

** Check Emacs version

I generally run the latest release of Emacs available on Arch
Linux. My configuration might be relatively simple, but it is still
possible that it breaks compatibility with older versions of Emacs.

This snippet checks the currently installed Emacs version and ensures
I am running the intended one.

#+begin_src emacs-lisp :tangle init.el
  ;;; Startup
  ;; Check version
  (when (version< emacs-version "29.3")
    (error "This configuration requires Emacs 29.3 and above!"))
#+end_src

** Load files and directory littering

Here we make sure Emacs is loading the newest file versions and also
not littering our directories with backup and autosave files.

#+begin_src emacs-lisp :tangle init.el
  ;; Load newest file versions
  (setq load-prefer-newer t)

  ;; Reload buffers when their respective files change on disk
  (global-auto-revert-mode t)
  (setq global-auto-revert-non-file-buffers t)

  ;; DO NOT LITTER
  (setq make-backup-files nil)
  (setq auto-save-default nil)

  ;; Do not generate custom.el file
  (setq custom-file "/dev/null") 
#+end_src

** Enable disabled commands

By default, Emacs hides some commands away from the user. Here we
enable them again.

#+begin_src emacs-lisp :tangle init.el
  ;; Enable all disabled commands (stuff emacs hides from you)
  (setq disabled-command-function nil)
#+end_src

** Tweak UI elements

Here we disable UI elements such as tool and menu bars.

#+begin_src emacs-lisp :tangle init.el
  ;; Disable some UI elements
  (menu-bar-mode -1)
  (tool-bar-mode -1)
  (scroll-bar-mode -1)
  (tooltip-mode -1)
  (setq use-dialog-box nil)
  (setq ring-bell-function 'ignore)
  (setq inhibit-startup-screen t)
#+end_src

* Package management

This configuration uses the built-in =elpaca= for package
management. It also configures its own modules that are loaded as
packages.

** Install elpaca

#+begin_src emacs-lisp :tangle init.el
  (defvar elpaca-installer-version 0.10)
  (defvar elpaca-directory (expand-file-name "elpaca/" user-emacs-directory))
  (defvar elpaca-builds-directory (expand-file-name "builds/" elpaca-directory))
  (defvar elpaca-repos-directory (expand-file-name "repos/" elpaca-directory))
  (defvar elpaca-order '(elpaca :repo "https://github.com/progfolio/elpaca.git"
				:ref nil :depth 1 :inherit ignore
				:files (:defaults "elpaca-test.el" (:exclude "extensions"))
				:build (:not elpaca--activate-package)))
  (let* ((repo  (expand-file-name "elpaca/" elpaca-repos-directory))
	 (build (expand-file-name "elpaca/" elpaca-builds-directory))
	 (order (cdr elpaca-order))
	 (default-directory repo))
    (add-to-list 'load-path (if (file-exists-p build) build repo))
    (unless (file-exists-p repo)
      (make-directory repo t)
      (when (<= emacs-major-version 28) (require 'subr-x))
      (condition-case-unless-debug err
	  (if-let* ((buffer (pop-to-buffer-same-window "*elpaca-bootstrap*"))
		    ((zerop (apply #'call-process `("git" nil ,buffer t "clone"
						    ,@(when-let* ((depth (plist-get order :depth)))
							(list (format "--depth=%d" depth) "--no-single-branch"))
						    ,(plist-get order :repo) ,repo))))
		    ((zerop (call-process "git" nil buffer t "checkout"
					  (or (plist-get order :ref) "--"))))
		    (emacs (concat invocation-directory invocation-name))
		    ((zerop (call-process emacs nil buffer nil "-Q" "-L" "." "--batch"
					  "--eval" "(byte-recompile-directory \".\" 0 'force)")))
		    ((require 'elpaca))
		    ((elpaca-generate-autoloads "elpaca" repo)))
	      (progn (message "%s" (buffer-string)) (kill-buffer buffer))
	    (error "%s" (with-current-buffer buffer (buffer-string))))
	((error) (warn "%s" err) (delete-directory repo 'recursive))))
    (unless (require 'elpaca-autoloads nil t)
      (require 'elpaca)
      (elpaca-generate-autoloads "elpaca" repo)
      (load "./elpaca-autoloads")))
  (add-hook 'after-init-hook #'elpaca-process-queues)
  (elpaca `(,@elpaca-order))
#+end_src

** Install use-package

#+begin_src emacs-lisp :tangle init.el
  (elpaca elpaca-use-package
    (elpaca-use-package-mode))
#+end_src

** Diminish

Diminish allows hiding minor modes from the modeline display. It also
integrates with use-package, and can be called from use-package
declarations.

#+begin_src emacs-lisp :tangle init.el
  (use-package diminish
    :ensure t)
#+end_src

* Buffers

#+begin_src emacs-lisp :tangle init.el
  (use-package ibuffer
    :bind
    ("C-x C-b" . ibuffer-other-window))
#+end_src

* Version control

#+begin_src emacs-lisp :tangle init.el
  (use-package transient
    :ensure t)

  (use-package magit
    :ensure t
    :after transient
    :bind
    ("C-x g" . magit-status))
#+end_src

* Text editing
** Point position

Enabling the following minor modes makes it so that the position of
point is always displayed in the modeline and highlighted in the
buffer. Also enables display of the line numbers on the left side of
the frame.

#+begin_src emacs-lisp :tangle init.el
  (global-hl-line-mode t)
  (line-number-mode t)
  (column-number-mode t)

  (add-hook 'text-mode-hook 'display-line-numbers-mode)
  (add-hook 'prog-mode-hook 'display-line-numbers-mode)
#+end_src

** Sentence navigation

A nice tweak to sentence navigation commands that makes them more
usable. We change the definition of a sentence to a more reasonable
“something that ends in a single space after punctuation”, instead of
the normal double space. 

#+begin_src emacs-lisp :tangle init.el
  (setq sentence-end-double-space nil)
#+end_src

** Auto-fill text

I like my text to wrap nicely in plain text files. =auto-fill-mode=
does that for me automatically.

#+begin_src emacs-lisp :tangle init.el
  (add-hook 'text-mode-hook 'turn-on-auto-fill)
  (add-hook 'org-mode-hook 'turn-on-auto-fill)
#+end_src

** Handling parens and bracket pairs

The following minor-modes help when dealing with parentheses, quotes
and other paired brackets. =rainbow-delimiters= colors them for
readability of Lisp code. =electric-pair-mode= automatically inserts
pairs when typing. =electric-quote-mode= inserts fancy quotes.

#+begin_src emacs-lisp :tangle init.el
  (use-package rainbow-delimiters
    :ensure t
    :hook
    ((text-mode-hook . rainbow-delimiters-mode)
     (prog-mode-hook . rainbow-delimiters-mode)))

  (setq electric-pair-pairs '((?\{ . ?\})
			      (?\( . ?\))
			      (?\[ . ?\])
			      (?\" . ?\")
			      (?\“ . ?\”)))
  (electric-pair-mode t)

  (show-paren-mode t)

  (setq electric-quote-replace-double t)
  (electric-quote-mode t)
#+end_src

* Dired

=dired= is Emacs’ own built-in file manager. It is quite powerful.

#+begin_src emacs-lisp :tangle init.el
  (use-package dired
    :config
    (defun dired-xdg-open ()
      "Open the marked files using xdg-open."
      (interactive)
      (let ((file-list (dired-get-marked-files)))
	(mapc
	 (lambda (file-path)
	   (let ((process-connection-type nil))
	     (start-process "" nil "xdg-open" file-path)))
	 file-list)))
    :custom
    (dired-listing-switches "-alh --group-directories-first")
    (dired-dwim-target t)
    :bind
    (:map dired-mode-map
	  (("v" . dired-xdg-open))))
#+end_src

* Appearance
** Dashboard

#+begin_src emacs-lisp :tangle init.el
  (use-package dashboard
    :ensure t
    :config
    (add-hook 'elpaca-after-init-hook #'dashboard-insert-startupify-lists)
    (add-hook 'elpaca-after-init-hook #'dashboard-initialize)
    (dashboard-setup-startup-hook))
#+end_src

** Theme
Here we set up fonts, themes, and anything visual.

#+begin_src emacs-lisp :tangle init.el
  (add-to-list 'default-frame-alist '(font . "Iosevka Nerd Font 11"))
  (set-frame-font "Iosevka Nerd Font 11" nil t)

  (load-theme 'modus-operandi)
#+end_src
